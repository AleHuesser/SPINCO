### Data overview {.tabset}
#### files available
```{r, out.width='1000px'}
# Read all files
files <- gsub(".*\\EEG_SIN/", "", dir(params$dirinput,recursive =TRUE))  # trimmed list of subdirectories and files from main data directory
# Identify unique measurements
measurements <- unique(sapply(strsplit(files,split='/'),'[[',1)) # first directory should indicate measurement
idxs <- formatC(as.numeric(sapply(strsplit(measurements,split = ' '),'[[',2)),  width = 2, format = "d", flag = "0")
#summary content
datSummary <- list()
for (m in 1:length(measurements)){
curfiles <- files[grep(pattern = measurements[m],files)]
datSummary[[m]] <-  as.data.frame(cbind(paste0('M',idxs[m]),
length(curfiles),
length(which(grepl(pattern = "*raw.*.eeg",x = curfiles))),
length(which(grepl(pattern = "*processed.*.eeg*",x = curfiles))),
ifelse(length(which(grepl(pattern = "*.wav$",x = curfiles)))>0,'yes','no'),
ifelse(length(which(grepl(pattern = "Readme*",x = curfiles)))>0,'yes','no')))
}
datSummary <- data.table::rbindlist(datSummary,fill = TRUE)
colnames(datSummary) <- c('measurement','n_total_files','n_rawfiles','n_procecssedfiles','contains_wav','contains_readme')
# Make Interactive table to display
reactable(datSummary,filterable = TRUE,
defaultColDef = colDef( align = "center", minWidth = 70,headerStyle = list(background = "#f7f7f8")),
bordered = TRUE, highlight =TRUE)
```
#### eeg file overview
```{r, out.width='1000px'}
# Read all files
files <- gsub(".*\\EEG_SIN/", "", dir(params$dirinput,recursive =TRUE))  # trimmed list of subdirectories and files from main data directory
# Identify unique measurements
measurements <- unique(sapply(strsplit(files,split='/'),'[[',1)) # first directory should indicate measurement
idxs <- formatC(as.numeric(sapply(strsplit(measurements,split = ' '),'[[',2)),  width = 2, format = "d", flag = "0")
#summary content
datSummary <- list()
for (m in 1:length(measurements)){
# search files for current measurement
curfiles <- files[grep(pattern = measurements[m],files)]
# Apply function to summarize file (only processed file)
if (length(which(grepl(pattern = "*processed.vhdr$",x = curfiles)))==1) {
processedfile <- paste0(params$dirinput,'/',curfiles[grep(curfiles,pattern='*processed.vhdr')])
#run my function
suppressWarnings(check_eeg(processedfile))
info <- cbind(dimensions, mrkrsInfo)
rm(processedfile)
} else { print(paste0('No file found for ',measurements[m]))
}
# Add to main summary table
datSummary[[m]] <- cbind(paste0('M',idxs[m]), # measurement
length(which(grepl(pattern = "*processed.*.eeg*",x = curfiles))), #count processed files
info)
colnames(datSummary[[m]])[1:2] <- c('measurement','n_processed_files')
}
datSummary <- data.table::rbindlist(datSummary,fill = TRUE)
# Make Interactive table to display
reactable(datSummary,filterable = TRUE,
defaultColDef = colDef( align = "center", minWidth = 70,headerStyle = list(background = "#f7f7f8")),
bordered = TRUE, highlight =TRUE)
```
setwd('W:/Gorka_share')
---
title: "Speech in Noise (SPIN) and EEG"
abstract: "The current experiment is used in a submited manuscript by Thomas Houweling (under review). It is set to examine associations between EEG activity and speech in noise recognition. Task requires hearing a digit name embbeded in different levels of noise and pressing the corresponding digit in a pad (digits are 1:6,8:9). <br><br> Data from N = 25 adults (after 7 subjects discarded;initial sample mean age 23.5, SD=3.9 years; 29 female)  <br><br>  Performance measures per trial are accuracy (correct/incorrect) and clarity rating (1-9 subjective scale). SNR of presentation are calibrated per individual in a pretest,  defining 3 SNR levels: SRT50 (50% correctness in calibration test), SRT-1.5db (noisier), SRT+1.5db (less noisy). <br><br> Prestimulus alpha power (8.5-12Hz) in noisy trials was higher for correct than for incorrect trials, and for those rated as clearer vs less clear. Linear mixed effect logistic regression model: accuracy ~ Î± power * SNR + (1|subject:digit) using source-reconstructed power found significant prediction in a left posterior temporal area in -300  to -50 ms. Interaction with stimuli difficulty: positive influence of alpha for recognizing clearer targets, but negative influence for the less clear targets."
runhead: "A Running Head"
author:
- name: Gorka Fraga Gonzalez
affiliation: University of Zurich
date: "`r format(Sys.time(), '%B %d, %Y')`"
output:
html_document:
code_folding: hide
highlight: espresso
theme: spacelab
toc: true
toc_float:
collapsed: false
smooth_scroll: true
toc_depth: 6
params:
dirinput:  "Y:/Data/Pilot (October 2021)"
#self_contained: false
---
```{r, include=FALSE}
knitr::opts_knit$set(root.dir = 'W:/Gorka_share')
knitr::opts_chunk$set(echo=TRUE,warning=FALSE)
library(tidyr)
library(dplyr)
library(reactable)
source('Y:/Scripts_neulin_EEG/SINEEG/funs/eeg_funs.R')
```
```{r, include = FALSE}
options(width=60)
local({
hook_output <- knitr::knit_hooks$get('output')
knitr::knit_hooks$set(output = function(x,options) {
if (!is.null(options$max.height)) options$attr.output <- c(
options$attr.output,
sprintf('style="max-height: %s;"',options$max.height)
)
hook_output(x, options)
})
})
```
### Folder structure {.tabset}
#### subfolders
```{r,max.height='300px'}
# Print folder tree
fs::dir_tree(params$dirinput,recurse=TRUE,type='directory')
```
#### subfolders & files
```{r, max.height = '300px' }
fs::dir_tree(params$dirinput,recurse=TRUE)
```
### {-}
### Data overview {.tabset}
#### files available
```{r, out.width='1000px'}
# Read all files
files <- gsub(".*\\EEG_SIN/", "", dir(params$dirinput,recursive =TRUE))  # trimmed list of subdirectories and files from main data directory
# Identify unique measurements
measurements <- unique(sapply(strsplit(files,split='/'),'[[',1)) # first directory should indicate measurement
idxs <- formatC(as.numeric(sapply(strsplit(measurements,split = ' '),'[[',2)),  width = 2, format = "d", flag = "0")
#summary content
datSummary <- list()
for (m in 1:length(measurements)){
curfiles <- files[grep(pattern = measurements[m],files)]
datSummary[[m]] <-  as.data.frame(cbind(paste0('M',idxs[m]),
length(curfiles),
length(which(grepl(pattern = "*raw.*.eeg",x = curfiles))),
length(which(grepl(pattern = "*processed.*.eeg*",x = curfiles))),
ifelse(length(which(grepl(pattern = "*.wav$",x = curfiles)))>0,'yes','no'),
ifelse(length(which(grepl(pattern = "Readme*",x = curfiles)))>0,'yes','no')))
}
datSummary <- data.table::rbindlist(datSummary,fill = TRUE)
colnames(datSummary) <- c('measurement','n_total_files','n_rawfiles','n_procecssedfiles','contains_wav','contains_readme')
# Make Interactive table to display
reactable(datSummary,filterable = TRUE,
defaultColDef = colDef( align = "center", minWidth = 70,headerStyle = list(background = "#f7f7f8")),
bordered = TRUE, highlight =TRUE)
```
#### eeg file overview
```{r, out.width='1000px'}
# Read all files
files <- gsub(".*\\EEG_SIN/", "", dir(params$dirinput,recursive =TRUE))  # trimmed list of subdirectories and files from main data directory
# Identify unique measurements
measurements <- unique(sapply(strsplit(files,split='/'),'[[',1)) # first directory should indicate measurement
idxs <- formatC(as.numeric(sapply(strsplit(measurements,split = ' '),'[[',2)),  width = 2, format = "d", flag = "0")
#summary content
datSummary <- list()
for (m in 1:length(measurements)){
# search files for current measurement
curfiles <- files[grep(pattern = measurements[m],files)]
# Apply function to summarize file (only processed file)
if (length(which(grepl(pattern = "*processed.vhdr$",x = curfiles)))==1) {
processedfile <- paste0(params$dirinput,'/',curfiles[grep(curfiles,pattern='*processed.vhdr')])
#run my function
suppressWarnings(check_eeg(processedfile))
info <- cbind(dimensions, mrkrsInfo)
rm(processedfile)
} else { print(paste0('No file found for ',measurements[m]))
}
# Add to main summary table
datSummary[[m]] <- cbind(paste0('M',idxs[m]), # measurement
length(which(grepl(pattern = "*processed.*.eeg*",x = curfiles))), #count processed files
info)
colnames(datSummary[[m]])[1:2] <- c('measurement','n_processed_files')
}
datSummary <- data.table::rbindlist(datSummary,fill = TRUE)
# Make Interactive table to display
reactable(datSummary,filterable = TRUE,
defaultColDef = colDef( align = "center", minWidth = 70,headerStyle = list(background = "#f7f7f8")),
bordered = TRUE, highlight =TRUE)
```
datSummary
knitr::opts_knit$set(root.dir = 'W:/Gorka_share')
knitr::opts_chunk$set(echo=TRUE,warning=FALSE)
library(tidyr)
library(dplyr)
library(reactable)
source('Y:/Scripts_neulin_EEG/SINEEG/funs/eeg_funs.R')
options(width=60)
local({
hook_output <- knitr::knit_hooks$get('output')
knitr::knit_hooks$set(output = function(x,options) {
if (!is.null(options$max.height)) options$attr.output <- c(
options$attr.output,
sprintf('style="max-height: %s;"',options$max.height)
)
hook_output(x, options)
})
})
# Print folder tree
fs::dir_tree(params$dirinput,recurse=TRUE,type='directory')
#### subfolders & files
```{r, max.height = '300px' }
fs::dir_tree(params$dirinput,recurse=TRUE)
# Read all files
files <- gsub(".*\\EEG_SIN/", "", dir(params$dirinput,recursive =TRUE))  # trimmed list of subdirectories and files from main data directory
# Read all files
files <- gsub(".*\\EEG_SIN/", "", dir(params$dirinput,recursive =TRUE))  # trimmed list of subdirectories and files from main data directory
# Identify unique measurements
measurements <- unique(sapply(strsplit(files,split='/'),'[[',1)) # first directory should indicate measurement
idxs <- formatC(as.numeric(sapply(strsplit(measurements,split = ' '),'[[',2)),  width = 2, format = "d", flag = "0")
idxs <- formatC(as.numeric(sapply(strsplit(measurements,split = ' '),'[[',2)),  width = 2, format = "d", flag = "0")
#summary content
datSummary <- list()
for (m in 1:length(measurements)){
curfiles <- files[grep(pattern = measurements[m],files)]
datSummary[[m]] <-  as.data.frame(cbind(paste0('M',idxs[m]),
length(curfiles),
length(which(grepl(pattern = "*raw.*.eeg",x = curfiles))),
length(which(grepl(pattern = "*processed.*.eeg*",x = curfiles))),
ifelse(length(which(grepl(pattern = "*.wav$",x = curfiles)))>0,'yes','no'),
ifelse(length(which(grepl(pattern = "Readme*",x = curfiles)))>0,'yes','no')))
}
colnames(datSummary) <- c('measurement','n_total_files','n_rawfiles','n_procecssedfiles','contains_wav','contains_readme')
datSummary
datSummary <- data.table::rbindlist(datSummary,fill = TRUE)
str(datSummary)
colnames(datSummary) <- c('measurement','n_total_files','n_rawfiles','n_procecssedfiles','contains_wav','contains_readme')
#summary content
datSummary <- list()
for (m in 1:length(measurements)){
curfiles <- files[grep(pattern = measurements[m],files)]
datSummary[[m]] <-  as.data.frame(cbind(paste0('M',idxs[m]),
length(curfiles),
length(which(grepl(pattern = "*raw.*.eeg",x = curfiles))),
length(which(grepl(pattern = "*processed.*.eeg*",x = curfiles))),
ifelse(length(which(grepl(pattern = "*.wav$",x = curfiles)))>0,'yes','no'),
ifelse(length(which(grepl(pattern = "Readme*",x = curfiles)))>0,'yes','no')))
}
datSummary <- data.table::rbindlist(datSummary,fill = TRUE)
colnames(datSummary) <- c('measurement','n_total_files','n_rawfiles','n_procecssedfiles','contains_wav','contains_readme')
# Make Interactive table to display
reactable(datSummary,filterable = TRUE,
defaultColDef = colDef( align = "center", minWidth = 70,headerStyle = list(background = "#f7f7f8")),
bordered = TRUE, highlight =TRUE)
# Read all files
files <- gsub(".*\\EEG_SIN/", "", dir(params$dirinput,recursive =TRUE))  # trimmed list of subdirectories and files from main data directory
# Read all files
files <- gsub(".*\\EEG_SIN/", "", dir(params$dirinput,recursive =TRUE))  # trimmed list of subdirectories and files from main data directory
# Identify unique measurements
measurements <- unique(sapply(strsplit(files,split='/'),'[[',1)) # first directory should indicate measurement
idxs <- formatC(as.numeric(sapply(strsplit(measurements,split = ' '),'[[',2)),  width = 2, format = "d", flag = "0")
#summary content
datSummary <- list()
#summary content
datSummary <- list()
for (m in 1:length(measurements)){
# search files for current measurement
curfiles <- files[grep(pattern = measurements[m],files)]
# Apply function to summarize file (only processed file)
if (length(which(grepl(pattern = "*processed.vhdr$",x = curfiles)))==1) {
processedfile <- paste0(params$dirinput,'/',curfiles[grep(curfiles,pattern='*processed.vhdr')])
#run my function
suppressWarnings(check_eeg(processedfile))
info <- cbind(dimensions, mrkrsInfo)
rm(processedfile)
} else { print(paste0('No file found for ',measurements[m]))
}
# Add to main summary table
datSummary[[m]] <- cbind(paste0('M',idxs[m]), # measurement
length(which(grepl(pattern = "*processed.*.eeg*",x = curfiles))), #count processed files
info)
colnames(datSummary[[m]])[1:2] <- c('measurement','n_processed_files')
}
# Read all files
files <- gsub(".*\\EEG_SIN/", "", dir(params$dirinput,recursive =TRUE))  # trimmed list of subdirectories and files from main data directory
# Identify unique measurements
measurements <- unique(sapply(strsplit(files,split='/'),'[[',1)) # first directory should indicate measurement
idxs <- formatC(as.numeric(sapply(strsplit(measurements,split = ' '),'[[',2)),  width = 2, format = "d", flag = "0")
#summary content
datSummary <- list()
for (m in 1:length(measurements)){
# search files for current measurement
curfiles <- files[grep(pattern = measurements[m],files)]
# Apply function to summarize file (only processed file)
if (length(which(grepl(pattern = "*processed.vhdr$",x = curfiles)))==1) {
processedfile <- paste0(params$dirinput,'/',curfiles[grep(curfiles,pattern='*processed.vhdr')])
#run my function
suppressWarnings(check_eeg(processedfile))
info <- cbind(dimensions, mrkrsInfo)
rm(processedfile)
} else { print(paste0('No file found for ',measurements[m]))
}
# Add to main summary table
datSummary[[m]] <- cbind(paste0('M',idxs[m]), # measurement
length(which(grepl(pattern = "*processed.*.eeg*",x = curfiles))), #count processed files
info)
colnames(datSummary[[m]])[1:2] <- c('measurement','n_processed_files')
}
datSummary <- data.table::rbindlist(datSummary,fill = TRUE)
# Make Interactive table to display
reactable(datSummary,filterable = TRUE,
defaultColDef = colDef( align = "center", minWidth = 70,headerStyle = list(background = "#f7f7f8")),
bordered = TRUE, highlight =TRUE)
datSummary
rmarkdown::render("SINEEG_pilot.Rmd",output_dir = 'W:/Gorka_share',output_file = 'SIN-EEG_pilot', output_format = c("html_document", "pdf_document"))
---
title: "SIN_dash"
author: "G.FragaGonzalez"
date: "`r Sys.Date()`"
output:
flexdashboard::flex_dashboard:
orientation: columns
---
```{r include = FALSE}
library(viridis)
library(ggplot2)
library(plotly)
library(marmap)
library(tidyr)
library(dplyr)
source('Y:/Scripts_neulin_EEG/SPINEEG/funs/eeg_funs.R')
```
# Intro {.sidebar}
Dashboard with EEG data
* Loads processed file
* Time amplitude plots
* Power spectra
# 1st Level
## Column 1
### ERP
```{r echo = FALSE}
headerfile <- "Y:/Data/Pilot (October 2021)/Measurement 10/processed.vhdr"
header  <-   raveio::read_eeg_header(file = headerfile)
eeg     <-      raveio::read_eeg_data(header, path = gsub('.vhdr','.eeg',headerfile))
# Create data frame with EEG data
#-------------------------------------
srate <- 200
time <- round(seq(from=(1/srate),to=ncol(eeg$data)/srate, by = 1/srate),2)
secs2show <- 1
#wide
eegdat <- cbind(time,as.data.frame(t(eeg$data)))
colnames(eegdat)[2:ncol(eegdat)] <- eeg$header$channels$number
#convert to long format
eegdatlong <- tidyr::pivot_longer(eegdat,
cols = colnames(eegdat)[2:ncol(eegdat)],names_to = 'channel')
# Filter some data for now
#dlong <- eegdatlong %>% dplyr::filter(.,channel %in% c('FP1','O2') & time < srate*secs2show)
dlong <- eegdatlong %>% dplyr::filter(., time < srate*secs2show)
dlong$channel <- as.factor(dlong$channel)
dlong$time <- as.factor(dlong$time)
# Plotly time series
plot_ly(dlong, x = ~time,y=~value) %>%
add_lines(y = ~value,split=~channel,visible = "legendonly") %>%
layout(
title = "Amplitude x Time ",
xaxis = list(
rangeslider = list(type = "time")),
yaxis=list(title="amplitude"))
#
x <-eegdatlong %>% dplyr::filter(.,channel=='FP1' & time < srate*secs2show) %>% select(.,value)
```
This shows the ERP data.
## Power
### Hawaii
```{r echo = FALSE}
data(hawaii)
autoplot(hawaii)
```
### Alaska
```{r echo = FALSE}
data(aleutians)
autoplot(aleutians)
```
# Group EEG
source('Y:/Scripts_neulin_EEG/SPINEEG/funs/eeg_funs.R')
---
title: "SIN_dash"
author: "G.FragaGonzalez"
date: "`r Sys.Date()`"
output:
flexdashboard::flex_dashboard:
orientation: columns
---
```{r include = FALSE}
library(viridis)
library(ggplot2)
library(plotly)
library(marmap)
library(tidyr)
library(dplyr)
```
# Intro {.sidebar}
Experimental design
* Speech in noise perception
* Brain state based trigggering
*
# 1st Level
## Column 1
### ERP
```{r echo = FALSE}
#
```
E
## Power
### Hawaii
```{r echo = FALSE}
```
### Alaska
```{r echo = FALSE}
```
# Group EEG
dev.off()
devtools::install_github(c("ramnathv/htmlwidgets", "smartinsightsfromdata/rpivotTable"))
# specifying a calculation
library(pivottabler)
iris %>%
tbl_df() %>%
filter( Sepal.Width > 3 ) %>%
rpivotTable()
library(dplyr)
iris %>%
tbl_df() %>%
filter( Sepal.Width > 3 ) %>%
rpivotTable()
library('rpivotTable')
library(dplyr)
iris %>%
tbl_df() %>%
filter( Sepal.Width > 3 ) %>%
rpivotTable()
iris
108/9
seq(from=3400, to= 6000, by=200)
seq(from=3400, to= 6000, by=200)
runif(3400, 6000)
runif(108,3400, 6000)
mean(seq(from=3400, to= 6000, by=200))
duration <- 465
n_conditions <- c('SRT50_0','SRT50_minus1','SRT50_plus1')
n_item_repetition <- 12
n_unique_items  <- 9
n_blocks <- 5
time_pretarget <- mean(seq(from=3400, to= 6000, by=200))
time_posttarget <- 500
design$duration <- 465
design$n_conditions <- c('SRT50_0','SRT50_minus1','SRT50_plus1')
design<-data.frame()
design$duration <- 465
design$n_conditions <- c('SRT50_0','SRT50_minus1','SRT50_plus1')
design$n_item_repetition <- 12
design$n_unique_items  <- 9
design$n_blocks <- 5
data.frame()
data.frame(matrix(3,2))
data.frame(matrix(nrow = 3,ncol=2))
as.data.frame(matrix(nrow = 3,ncol=2))
as.data.frame(matrix(nrow = 1,ncol=8))
design$duration <- 465
data.frame("duration" <- 465,
"n_conditions" <- 3,
"n_item_repetition" <- 12,
"n_unique_items"  <- 9,
"n_blocks" <- 5,
"time_pretarget" <- mean(seq(from=3400, to= 6000, by=200)),
"time_posttarget" <- 500)
design <- data.frame("duration" <- 465,
"n_conditions" <- 3,
"n_item_repetition" <- 12,
"n_unique_items"  <- 9,
"n_blocks" <- 5,
"time_pretarget" <- mean(seq(from=3400, to= 6000, by=200)),
"time_posttarget" <- 500)
design
design <- data.frame("duration" = 465,
"n_conditions" = 3,
"n_item_repetition" = 12,
"n_unique_items"  = 9,
"n_blocks" = 5,
"time_pretarget" = mean(seq(from=3400, to= 6000, by=200)),
"time_posttarget" = 500)
design
design %>%
tbl_df() %>%
rpivotTable()
data(HairEyeColor)
rpivotTable(data = HairEyeColor, rows = "Hair",cols="Eye", vals = "Freq", aggregatorName = "Sum", rendererName = "Table", width="100%", height="400px")
devtools::install_github("rte-antares-rpackage/manipulateWidget", ref="develop")
devtools::install_github("rte-antares-rpackage/manipulateWidget", ref="develop")
#devtools::install_github
library(manipulateWidget)
manipulateWidget(
Period = mwSlider(1960, 2014, c(1960, 2014)),
Country = mwSelect("A", "United States")
)
## subset epicontacts object
sub <- epic %>%
subset(
node_attribute = list(date_onset = c(as.Date(c("2014-06-30", "2014-06-01"))))
)
## subset epicontacts object
sub <- design %>%
subset(
node_attribute = list(date_onset = c(as.Date(c("2014-06-30", "2014-06-01"))))
)
plot(
design,
width = 700,
height = 700
)
## subset epicontacts object
sub <- design %>%
subset(
node_attribute = list(date_onset = c(1:23))
)
plot(
design,
width = 700,
height = 700
)
